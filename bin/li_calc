#!/usr/bin/env python

"""
Usage:
  li_calc basic [options] [--thr=<z>] <l?stat> [<rstat>]
  li_calc curve [options] [--lthr=<z>] [--uthr=<y>] [--steps=<n>] [--am] <l?stat> [<rstat>]
  li_calc boot [options] [--lthr=<z>] [--uthr=<y>] [--steps=<n>] [--am] [--bout=<f>] <l?stat> [<rstat>]

Examples:
  li_calc basic -c --masks=mask_lh.nii,mask_rh.nii --thr=2.3 stat.nii
  li_calc boot --steps=10 --bout=bootstrap_LIs.csv stat.lh.func.gii stat.rh.func.gii

Calculate the laterality index (LI) for a statistical image. In basic mode,
only one threshold is used. In curve mode, multiple thresholds are used to
estimate an LI curve. A composite LI is obtained by taking the average of the
threshold specific LIs, after weighting by each threshold. In boot mode,
thresholded images are resampled using bootstrapping to generate 10,000 LIs per
threshold. These bootstrapped LIs are trimmed and then averaged leaving one LI
per threshold. Bootstrapped LIs are combined across thresholds as above.

References:
  Wilke, M., & Schmithorst, V. J. (2006). A combined bootstrap/histogram analysis
    approach for computing a lateralization index from neuroimaging data.
    Neuroimage, 33(2), 522-530.
  Wilke, M., & Lidzba, K. (2007). LI-tool: a new toolbox to assess lateralization
    in functional MR-data. Journal of neuroscience methods, 163(1), 128-136.

Arguments:
  --thr=<z>      Threshold for basic LI calculation. Can either be expressed
                 as a raw value (e.g. --thr=2.3) or as a percentile 
                 (e.g. --thr=90%). [default: 80%].
  --lthr=<z>     Lower threshold for curve based calculation [default: 50%].
  --uthr=<y>     Upper threshold for curve based calculation [default: 95%].
  --steps=<n>    Number of different thresholds to use for curve based
                 calculation [default: 20].
  --am           Compute arithmetic mean instead of weighted average.
  --bout=<f>     Output csv file for bootstrapped LIs.
  <l?stat>       Left hemisphere statistical image unless performing a
                 volume-based analysis. Acceptable formats are Nifti and Gifti.
  <rstat>        Right hemisphere statistical image. Necessary if performing
                 a surface-based analysis.

Options:
  -c, --count        Count active voxels, instead of adding values. Not available
                     in boot mode.
  --masks=<masks>    Left and right hemisphere masks, either separated by
                     commas or enclosed in quotes and separated by a space 
                     (e.g. --masks=lh.nii.gz,rh.nii.gz).
  --log=<file>       Log file. Otherwise log information will be sent to stderr.
  -h, --help         View this message.
"""

# ==============================================================================
#
# Laterality index calculator based on Wilke bootstrapping method
#
# Author:          Connor Lane
#                  Neuroplasticity and Development Laboratory
#                  Johns Hopkins University
#                  clane@jhu.edu
#
# Dependencies:    numpy >= 1.6.1
#                  docopt >= 0.6.1
#                  nibabel >= 1.3.0
#
# ==============================================================================

# so you can print to stderr
from __future__ import print_function

# parse args before imports for fast help message
from docopt import docopt
ARGS = docopt(__doc__)

from datetime import datetime as dt
import nibabel as nib
from nibabel import gifti
import numpy as np
import os
import re
from shutil import copy, rmtree
import sys
import tempfile as tf

# default log location
log_file = sys.stderr

PID = os.getpid()

def main():
  """
  Main function
  """
  # so you can modify log file within the function
  global log_file

  # determine LI calculation mode
  if ARGS['basic']:
    mode = 'basic'
  elif ARGS['curve']:
    mode = 'curve'
  else:
    mode = 'boot'

  # log location
  if ARGS['--log'] is not None:
    if os.path.exists(os.path.dirname(os.path.abspath(ARGS['--log']))):
      log_file = open(ARGS['--log'], 'a')
    else:
      warning('Log file directory does not exist. Using standard error.')
  
  # save command line and start time to log
  start_time = dt.now()
  log('li_calc job started at {}.\nCommand line:\n  li_calc'.format(start_time), ' '.join(sys.argv[1:]))

  count = ARGS['--count']
  if count and mode == 'boot':
    warning('Counting voxels option not available in boot mode.')
    count = False
  
  # process masks argument
  masks = ARGS['--masks']
  if masks is not None:
    # format of argument is a pair of images, separated by comma or space
    masks = re.split(r'[, ]', masks)
    if len(masks) != 2:
      raise LiError('A left and right hemisphere mask is required. Double-check option format.')
    masks = map(img_read, masks)
    for i, hemi in zip([0, 1], ['left', 'right']):
      if masks[i].shape[0] > 1:
        warning('A 4D mask has been provided. Discarding All but the first volume.')
      masks[i] = masks[i][0, :]
      if set(np.unique(masks[i])) != {0, 1}:
        warning('Masks are not binary. Binarizing.')
      masks[i] = (masks[i]>0).astype('int')
      log('Voxels in {} hemisphere mask: {}.'.format(hemi, np.sum(masks[i])))

  boot_csv = ARGS['--bout']
  if boot_csv is not None:
    if not os.path.exists(os.path.dirname(os.path.abspath(boot_csv))):
      warning('Bootstrap output directory does not exist. Bootstrap results will not be saved.')
      boot_csv = None
  
  # process left and right hemisphere images
  stats = [None, None]
  stats[0] = img_read(ARGS['<l?stat>'])
  if ARGS['<rstat>'] is None:
    # For volume case, just copy whole brain image. This will get masked in a second.
    stats[1] = np.copy(stats[0])
    if masks is None:
      raise LiError('A left and right hemisphere mask is required when doing a volume-based analysis')
  else:
    stats[1] = img_read(ARGS['<rstat>'])
  for i in 0, 1:
    if stats[i].shape[0] > 1:
      warning('A 4D image has been provided. Discarding All but the first volume.')
    stats[i] = stats[i][0, :]
  # masking stats
  if masks is not None:
    for i in 0, 1:
      if masks[i].shape != stats[i].shape:
        raise LiError('Masks and stats do not have the same shape.')
      stats[i] = stats[i][masks[i]==1]
  
  # process thresholds
  if mode == 'basic':
    thresh = [thresh_check(ARGS['--thr'], stats)]
    log('Threshold:', *np.round(thresh, 2))
  else:
    low_thresh = thresh_check(ARGS['--lthr'], stats)
    high_thresh = thresh_check(ARGS['--uthr'], stats)
    steps = ARGS['--steps']
    try:
      steps = int(steps)
    except ValueError:
      raise LiError('Bad format for number of steps.')
    # generate linearly spaced thresholds between lower and upper thresh
    thresh = np.linspace(low_thresh, high_thresh, steps)
    log('Thresholds:', *np.round(thresh, 2))
  
  # do weighted mean or not
  weighted = not ARGS['--am']
  
  # calculate laterality index
  if mode == 'boot':
    LI, LIs, all_boot_LIs = boot_li_calc(stats, thresh, weighted, nsamples=100, k=1.0, nLIs=10000, trim_window=[25, 75])
    if boot_csv is not None:
      np.savetxt(boot_csv, all_boot_LIs, delimiter=',')
  else:
    LI, LIs = li_calc(stats, thresh, count, weighted)
  if LIs.size > 1:
    log('LIs for each threshold:', *np.round(LIs, 2))
  
  # print out laterality index
  # this should be the only output that gets sent to stdout, so it can be
  # captured in the shell for further processing
  print(LI)
  log('li_calc job finished!\nRun time: {}.'.format(dt.now() - start_time))
  return

class LiError(Exception):
  """
  Class for script-specific errors.
  """
  def __init__(self, msg):
    msg = 'ERROR: (pid={}) {}'.format(PID, msg)
    Exception.__init__(self, msg)
    return

def warning(*objs):
  """
  Warning function.
  """
  print('WARNING: (pid={})'.format(PID), *objs, file=log_file)
  return

def log(*objs):
  """
  Logging function.
  """
  print('(pid={})'.format(PID), *objs, file=log_file)
  return

def img_read(img):
  """
  Read a .nii, .nii.gz, or .gii image. Return a TxN numpy array.

  First dimension is time, second dimension contains all spatial dimensions
  flattened according to numpy.reshape function.
  """
  if not os.path.isfile(img):
    raise LiError('Image file ({}) does not exist.'.format(img))
  ext = r'(\.nii(\.gz)?|\.gii)$'
  img_ext = re.search(ext, img)
  if img_ext is None:
    raise LiError('Image file ({}) does not match any accepted extensions (.nii, .nii.gz, .gii)'.format(img))
  img_ext = img_ext.group()
  if img_ext == '.nii':
    try:
      img = nib.load(img).get_data()
    except:
      raise LiError('Image file ({}) could not be loaded'.format(img))
    # reshape 4d nifti array to 2d, with time as first axis
    newshape = (np.product(img.shape[:3]), -1)
    img = np.transpose(img.reshape(newshape))
  elif img_ext == '.nii.gz':
    try:
      img = nib.load(img).get_data()
    except:
      # apparently some files (including our raw data) have a .gz extension but
      # are not gzipped, resulting in error. Remove extension before giving up.
      tmpdir = tf.mkdtemp(prefix='img_read-')
      img_copy = '{}/img.nii'.format(tmpdir)
      copy(img, img_copy) # maybe link instead of copy
      try:
        img = nib.load(img_copy).get_data()
        rmtree(tmpdir)
      except:
        rmtree(tmpdir)
        raise LiError('Image file ({}) could not be loaded'.format(img))
    # reshape 4d nifti array to 2d, with time as first axis
    newshape = (np.product(img.shape[:3]), -1)
    img = np.transpose(img.reshape(newshape))
  else:
    try:
      img = gifti.read(img)
    except:
      raise LiError('Image file ({}) could not be loaded'.format(img))
    img = np.array(map(lambda d: d.data, img.darrays))
  return img

def thresh_check(thresh, stats):
  """
  Check formatting of threshold option. Calculate absolute threshold if percent.
  """
  if thresh[-1] == '%':
    try:
      thresh = float(thresh[:-1])
    except ValueError:
      raise LiError('Bad format for threshold.')
    if thresh < 0 or thresh >= 100:
      raise LiError('Bad format for threshold.')
    # percentiles based on distribution of positive stats only
    pos_stats = [stats[i][stats[i]>0] for i in [0, 1]]
    # set thresh to be minimum of two percentiles from left and right hemi
    thresh = np.min([np.percentile(pos_stats[i], thresh) for i in [0, 1]])
  else:
    try:
      thresh = float(thresh)
    except ValueError:
      raise LiError('Bad format for threshold.')
  return thresh

def li_calc(stats, thresholds, count, weighted=True):
  """
  Calculate LIs across (potentially) multiple thresholds, return weighted mean
  """
  thresholds = np.reshape(thresholds, (-1, 1))
  # initialize matrix for left and right hemi sums
  Qs = np.zeros((thresholds.size, 2))
  for i in 0, 1:
    # copy the stat for each threshold
    stat_copies = np.zeros((thresholds.size, stats[i].size))
    stat_copies[:, :] = stats[i]
    # sum across voxels
    if count:
      Qs[:, i] = np.sum(stat_copies > thresholds, axis=1, dtype='float')
    else:
      Qs[:, i] = np.sum(stat_copies*(stat_copies > thresholds), axis=1, dtype='float')
  # exclude thresholds for which one of the hemispheres had 0 activation
  Q_mask = np.min(Qs > 0, axis=1)
  Qs = Qs[Q_mask, :]
  if Qs.size == 0:
    raise LiError('No activation above threshold in at least one hemisphere.')
  # calculate laterality indices
  LIs = (Qs[:, 0] - Qs[:, 1])/(Qs[:, 0] + Qs[:, 1])
  if weighted:
    # trim thresholds
    thresholds = thresholds.reshape(-1)[:LIs.size]
    LI = np.sum(LIs * thresholds)/np.sum(thresholds)
  else:
    LI = np.mean(LIs)
  return LI, LIs

def boot_li_calc(stats, thresholds, weighted=True, nsamples=100, k=1.0, nLIs=10000, trim_window=[25, 75]):
  """
  Calculate bootstrapped LIs across multiple thresholds, return weighted mean.
  """
  LIs = []
  # double check that thresholds are sorted
  thresholds = np.sort(thresholds)
  # initialize matrix for all bootstrapped LIs
  all_boot_LIs = np.zeros((thresholds.size*nLIs, 2))
  stop_early=False
  for j, thresh in enumerate(thresholds):
    # initialize matrix for left and right hemi sums
    Qs = np.zeros((nsamples, 2))
    for i in 0, 1:
      thr_stat = stats[i][stats[i]>thresh]
      # break out of inner loop if no above threshold voxels
      if thr_stat.size == 0:
        stop_early=True
        break
      # generate bootstrap samples
      boot_size = int(np.round(thr_stat.size*k))
      boot_samples = np.random.randint(0, thr_stat.size, size=(nsamples, boot_size))
      boot_samples = thr_stat[boot_samples]
      # calculate sums across voxels for each boot sample
      Qs[:, i] = np.sum(boot_samples, axis=1)
    # break out of outer loop if no above threshold voxels
    # (since thresholds sorted, there won't be any active voxels later either
    if stop_early:
      break
    # generate all combinations of left and right hemis sums using a function I
    # found on stack overflow
    prod_Qs = cartesian([Qs[:, 0], Qs[:, 1]])
    if prod_Qs.shape[0] > nLIs:
      prod_Qs = np.random.shuffle(prod_Qs)[:nLIs, :]
    # calculate bootstrapped LIs
    boot_LIs = (prod_Qs[:, 0] - prod_Qs[:, 1])/(prod_Qs[:, 0] + prod_Qs[:, 1])
    # calculate upper and lower extremes for trim window
    trim_min, trim_max = np.percentile(boot_LIs, trim_window)
    # trim bootstrapped LIs
    trim_boot_LIs = boot_LIs[(boot_LIs > trim_min) * (boot_LIs < trim_max)]
    # If too few LIs to trim, quit loop
    # NOTE: could this ever happen??
    if trim_boot_LIs.size == 0:
      break
    # caclulate trimmed mean of bootstrapped LIs
    boot_LI = np.mean(trim_boot_LIs)
    LIs.append(boot_LI)
    # add all bootstrapped LIs to growing list
    all_boot_LIs[j*nLIs: (j+1)*nLIs, :] = np.transpose(np.vstack([np.repeat(thresh, nLIs), boot_LIs]))
  if len(LIs) == 0:
    raise LiError('No activation above threshold in at least one hemisphere.')
  LIs = np.asarray(LIs)
  if weighted:
    # trim thresholds
    thresholds = thresholds.reshape(-1)[:LIs.size]
    LI = np.sum(LIs * thresholds)/np.sum(thresholds)
  else:
    LI = np.mean(LIs)
  return LI, LIs, all_boot_LIs

def cartesian(arrays, out=None):
  """
  Generate a cartesian product of input arrays.

  Parameters
  ----------
  arrays : list of array-like
    1-D arrays to form the cartesian product of.
  out : ndarray
    Array to place the cartesian product in.

  Returns
  -------
  out : ndarray
    2-D array of shape (M, len(arrays)) containing cartesian products
    formed of input arrays.

  Note: From http://stackoverflow.com/questions/1208118/using-numpy-to-build-an-array-of-all-combinations-of-two-arrays
  """
  arrays = [np.asarray(x) for x in arrays]
  dtype = arrays[0].dtype

  n = np.prod([x.size for x in arrays])
  if out is None:
    out = np.zeros([n, len(arrays)], dtype=dtype)

  m = n / arrays[0].size
  out[:,0] = np.repeat(arrays[0], m)
  if arrays[1:]:
    cartesian(arrays[1:], out=out[0:m,1:])
    for j in xrange(1, arrays[0].size):
      out[j*m:(j+1)*m,1:] = out[0:m,1:]
  return out

if __name__ == '__main__':
  try:
    main()
  except LiError as e:
    print(e, file=log_file)
    # return NA as laterality index if exiting with error
    print('NA')
    sys.exit(1)
  sys.exit(0)
