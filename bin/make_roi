#!/usr/bin/env python

"""
Usage:
  make_roi vertex [options] (-p <perc> | -n <N> | -t <thr>) <stat> <info> <roi>
  make_roi cluster [options] (-p <perc> | -t <thr>) <stat> <info> <roi>
  make_roi watershed [options] [-p <perc> | -n <N> | -t <thr>] [-s <seeds> | --man-seeds] <stat> <info> <roi>
  make_roi circle [options] -r <rad> (-c <coord> | <stat>) <info> <roi>

Arguments:
  vertex               Choose all vertices meeting some criteria.
  cluster              Choose all contiguous vertices meeting some criteria.
                       All matching clusters reported.
  watershed            Fill in vertices around distinct peaks until some
                       criteria met. Vertices are filled using "watershed"
                       algorithm. All matching ROIs reported.
  circle               Choose all vertices within some radius of a given
                       coordinate, or the peak of a statistical map.
  -p <perc>            Percentage threshold for ROI. Value must be between 1.0
                       and 100.0 (Not between 0.0 and 1.0!). (E.g. vertex -p 10
                       results in ROI containing top 10% of vertices.)
  -n <N>               Number of vertices to include in ROI. (E.g. vertex -n 100
                       results in ROI containing top 100 vertices.)
  -t <thr>             Raw stat threshold for ROI. (E.g. cluster -t 3.1 results
                       in all clusters above 3.1.)
  -s <seeds>           Path to text file containing seed vertices for
                       watershed. One row per seed region, vertices separated
                       by spaces within a row. (E.g. -s seeds.txt.)
  --man-seeds          Instead of providing a seed file in watershed mode, pick
                       the seed vertices interactively using tksurfer.
  -r <rad>             Radius of circular ROI. Only relevant in circle mode.
  -c <coord>           Center coordinate of circular ROI. Coordinate can be
                       X,Y,Z or vertex index. Only relevant in circle mode.
                       (E.g. -c 1234.)
  <stat>               Statistical map in Nifti or metric Gifti format (E.g.
                       zstat1.func.gii).
  <surf>               Gifti surface file, in same space as stat map (E.g.
                       lh.midthickness.surf.gii).
  <info>               Path to csv table where ROI information will be saved.
                       If it already exists it'll be appended. Otherwise it'll
                       be created.
  <roi>                Path to output ROI, excluding file extension. This will
                       determine the prefix of output metric Gifti ROI files
                       (E.g. sub/rois/IFG.lh --> sub/rois/IFG.lh.shape.gii).
                       Importantly, the basename will also be the first column
                       in the info file, so make it unique.

Options:
  --fs-sub <subject>   Freesurfer subject in SUBJECTS_DIR [default: 32k_fs_LR].
  --hemi <hemi>        Hemisphere (lh or rh) [default: lh].
  --surf <surface>     Surface name [default: midthickness].
  --search <mask>      Seach space mask in Nifti or metric Gifti format. Must
                       be in same space as stat map and surface. (E.g. --search
                       lh.IFG.shape.gii.) [default: cortex]
  --lit-coord <coord>  Measure and report distance from ROI peak to literature
                       or group average coordinate. Coordinate can be X,Y,Z or
                       vertex index (E.g. --lit-coord=20.,19.,-5.).
  --peak-thr <perc>    Threshold for finding distinct peaks of activation in
                       watershed mode. Each connected cluster above this
                       threshold will give rise to a distinct ROI. Threshold
                       should be a percentile, as with the -p <perc> option.
                       E.g. --peak-thr 10 for a top 10% threshold Can be
                       overridden by including a seed file or giving the
                       --man-seeds flag. [default: 5]
  --eval <metric>      Metric to use when weighing ROI candidates. Options are
                       "strength" (sum of stat values), "dist" (weighted
                       average distance from literature coord to ROI),
                       "strength / dist" (strength / distance), or "strength /
                       spread" (strength / weighted average distance from ROI
                       peak to all other ROI vertices) [default: strength].
  --select <mode>      ROI selection mode. Options are: "best" (the single best
                       ROI will be produced), "pick" (you will choose the ROI
                       from the available options interactively), or "all" (all
                       available ROIs will be produced) [default: best].
  -h, --help           Display this message.
"""

# Parse args before imports for fast help message
from docopt import docopt
ARGS = docopt(__doc__)

from datetime import datetime as dt
import numpy as np
import os
import re
from shutil import rmtree
import subprocess as sp
import sys
import tempfile as tf
import threading as th

from npdl_utils import Logger, NPDLError, Surface, img_read, img_save, read_table, init_table

logger = Logger(global_log=None, local_log=None, pid=os.getpid())

def main():
  """Main function"""
  global logger

  # ----------------------------------------------------------------------------
  # Read command line and check argument formats
  # ----------------------------------------------------------------------------

  # Mode
  for mode_opt in ['vertex', 'cluster', 'watershed', 'circle']:
    if ARGS[mode_opt]:
      mode = mode_opt
      break

  # Numerical options
  opt_names = ['-p', '-n', '-t', '-r', '--peak-thr']
  num_types = [float, int, float, float, float]
  num_mins = [0., 0, None, 0., None]
  num_maxs = [100., None, None, None, None]
  num_opts = dict()
  for i in range(len(opt_names)):
    num_opts[opt_names[i]] = num_check(ARGS[opt_names[i]], opt_names[i],
                                       num_types[i], num_mins[i], num_maxs[i])

  # Coordinate options
  circ_coord, circ_coord_type = coord_check(ARGS['-c'], '-c')
  lit_coord, lit_coord_type = coord_check(ARGS['--lit-coord'], '--lit-coord')

  # Checking paths
  for opt_name in ['<info>', '<roi>']:
    dir_check(ARGS[opt_name], opt_name)
  out_info = ARGS['<info>']
  out_roi = ARGS['<roi>']
  roi_name = os.path.basename(out_roi)

  # Reading seeds file
  seeds = ARGS['-s']
  if seeds is not None:
    seeds = read_table(seeds)
    try:
      seeds = [np.array(seed, dtype=np.int32) for seed in seeds]
    except:
      raise NPDLError('Watershed seeds file has bad format.')
  elif ARGS['--man-seeds']:
    seeds = 'manual'

  # Check evaluation metric
  eval_metric = ARGS['--eval']
  eval_inds = {'strength': 11, 'dist': 10, 'strength / dist': 12, 'strength / spread': 13}
  try:
    eval_ind = eval_inds[eval_metric]
  except KeyError:
    raise NPDLError('--eval option not one of the acceptable choices.')
  if eval_ind in {10, 12} and lit_coord is None:
    raise NPDLError('A literature coordinate is required for evaluation metrics depending on distance.')

  # ROI selection mode
  select_mode = ARGS['--select']
  if select_mode not in {'best', 'pick', 'all'}:
    raise NPDLError('--select option not one of the acceptable choices.')

  # Load surface
  subjects_dir = os.environ['SUBJECTS_DIR']
  sub, hemi, surf_name = ARGS['--fs-sub'], ARGS['--hemi'], ARGS['--surf']
  if not os.path.isdir('{}/{}'.format(subjects_dir, sub)):
    raise NPDLError('Subject: {} does not exist in SUBJECTS_DIR: {}.'.format(sub, subjects_dir))
  surf_path = '{}/{}/surf/{}.{}.surf.gii'.format(subjects_dir, sub, hemi, surf_name)
  surf = Surface(surf_path)

  # Loading stat map.
  stat_path = ARGS['<stat>']
  if stat_path is not None:
    stat = img_read(stat_path)
    if stat.shape[0] > 1:
      raise NPDLError('Multiple maps present in stat file.')
    stat = stat[0, :]
  else:
    # Need placeholder in case we're in circle mode.
    stat = np.ones(surf.num_verts)
  # Used in a few places for finding accurate peaks after masking
  shift_stat = stat - stat.min() + 1.0
  # Used for displaying stat in tksurfer
  stat_uthr = np.percentile(stat, 99.)

  # Load search space.
  search_path = ARGS['--search']
  if search_path == 'cortex':
    search_path = '{}/{}/label/masks/{}.cortex.shape.gii'.format(subjects_dir, sub, hemi)
  search = img_read(search_path)
  if search.shape[0] > 1:
    raise NPDLError('Multiple maps present in search space file.')
  search = search[0, :]

  if set(np.unique(search)) != {0, 1}:
    logger.warning('Search space is not a binary image. Binarizing by thresholding at 0.')
    search = (search > 0).astype(int)

  # Check that all surface files have the same # of vertices.
  if len(set([stat.size, search.size, surf.num_verts])) > 1:
    raise NPDLError('Input image files do not have the same number of vertices.')
  num_verts = stat.size

  # Project input coordinates to surface (i.e. find closest vertex).
  if circ_coord_type == 'coord':
    circ_coord = surf.project_coord(circ_coord)
  if lit_coord_type == 'coord':
    lit_coord = surf.project_coord(lit_coord)

  # ----------------------------------------------------------------------------
  # Vertex ROI mode
  # ----------------------------------------------------------------------------

  if mode == 'vertex':
    if num_opts['-p'] is not None:
      roi = top_perc_roi(num_opts['-p'], stat, search)
    elif num_opts['-n'] is not None:
      roi = top_n_roi(num_opts['-n'], stat, search)
    else:
      roi = thr_roi(num_opts['-t'], stat, search)
    rois = [roi]

  # ----------------------------------------------------------------------------
  # Cluster ROI mode
  # ----------------------------------------------------------------------------

  if mode == 'cluster':
    if num_opts['-p'] is not None:
      mask = top_perc_roi(num_opts['-p'], stat, search)
    else:
      mask = thr_roi(num_opts['-t'], stat, search)
    clusters, num_clusters = find_clusters(mask, surf)
    rois = []
    for i in range(1, num_clusters+1):
      roi = (clusters==i).astype(int)
      rois.append(roi)

  # ----------------------------------------------------------------------------
  # Watershed ROI mode
  # ----------------------------------------------------------------------------

  if mode == 'watershed':
    # If search space is not connected, watershed might not converge
    if count_components(search, surf) > 1:
      raise NPDLError('Watershed procedure requires a connected search space.')

    if seeds is None:
      cluster_mask = top_perc_roi(num_opts['--peak-thr'], stat, search)
      clusters, num_clusters = find_clusters(cluster_mask, surf)
      seeds = []
      for i in range(1, num_clusters+1):
        masked_stat = shift_stat * (clusters==i).astype(int)
        seed = np.array([np.argmax(masked_stat)])
        seeds.append(seed)
    elif seeds == 'manual':
      seeds = pick_seeds(sub, hemi, search_path, stat_path, stat_uthr)

    if num_opts['-t'] is None:
      fill_stop = 0.0
    else:
      fill_stop = num_opts['-t']
    
    fill_rate = .05
    rois = watershed(seeds, stat, search, surf, fill_rate, fill_stop)

    if num_opts['-p'] is not None:
      n = int(round(.01 * perc * search.sum()))
      rois = [top_n_roi(n, stat, roi) for roi in rois]
    elif num_opts['-n'] is not None:
      rois = [top_n_roi(num_opts['-n'], stat, roi) for roi in rois]

  # ----------------------------------------------------------------------------
  # Circle ROI mode
  # ----------------------------------------------------------------------------

  if mode == 'circle':
    if circ_coord is None:
      masked_stat = shift_stat * search
      circ_coord = np.argmax(masked_stat)
    roi = surf.distance([circ_coord], max_distance=num_opts['-r'])
    roi = (roi != np.inf).astype(int) * search
    rois = [roi]

  # ----------------------------------------------------------------------------
  # Compute descriptive stats and make ROI choice.
  # ----------------------------------------------------------------------------

  # Compute descriptive stats
  rois = np.array(rois)
  num_rois = rois.shape[0]
  roi_stats = [descriptive_stats(rois[i, :], stat, surf, lit_coord, circ_coord) 
               for i in range(num_rois)]
  roi_stats = np.array(roi_stats, dtype=object)

  eval_stat = roi_stats[:, eval_ind]
  if eval_metric == 'dist':
    eval_stat = 1./eval_stat
  ranking = np.argsort(eval_stat * -1.)
  rois = rois[ranking]
  roi_stats = roi_stats[ranking, :]

  roi_nums = np.arange(1, num_rois+1).reshape((-1, 1))
  roi_stats = np.hstack([roi_nums, roi_stats])

  if select_mode == 'pick':
    choice = pick_roi(sub, hemi, rois, roi_stats, search_path, stat_path, surf_path, stat_uthr)
    rois = rois[[choice]]
    roi_stats = roi_stats[[choice], :]
  elif select_mode == 'best':
    rois = rois[[0]]
    roi_stats = roi_stats[[0], :]

  # ----------------------------------------------------------------------------
  # Save output.
  # ----------------------------------------------------------------------------

  roi_stat_header = ('Name,Search.path,Stat.path,Rank,Size,Min.stat,Max.stat,' +
                     'Mean.stat,Peak.vert,Peak.x,Peak.y,Peak.z,Num.comps,Spread,' +
                     'Lit.dist,Strength,Strength.over.dist,Strength.over.spread\n')

  num_rois = rois.shape[0]
  roi_names = np.repeat(roi_name, num_rois).reshape((-1, 1))
  stat_paths = np.repeat(os.path.abspath(stat_path), num_rois).reshape((-1, 1))
  search_paths = np.repeat(os.path.abspath(search_path), num_rois).reshape((-1, 1))
  roi_stats = np.hstack([roi_names, stat_paths, search_paths, roi_stats])
  roi_stats_str = '\n'.join([','.join(map(str,row)) for row in roi_stats.tolist()]) + '\n'

  if os.path.isfile(out_info):
    f = open(out_info, 'a')
    f.write(roi_stats_str)
    f.close()
  else:
    f = open(out_info, 'a')
    f.write(roi_stat_header + roi_stats_str)
    f.close()

  # Save metric mask and possibly an annotation.
  for i in range(num_rois):
    if num_rois > 1:
      roi_path = '{}.{}.shape.gii'.format(out_roi, i+1)
    else:
      roi_path = '{}.shape.gii'.format(out_roi)
    img_save(roi_path, rois[i, :], surf_path)

  if num_rois > 1:
    combined_rois = combine_rois(rois)
    seg_path = '{}.all.shape.gii'.format(out_roi)
    annot_path = '{}.all.annot'.format(out_roi)
    img_save(seg_path, combined_rois, surf_path)
    seg2annot(seg_path, annot_path, sub, hemi)
  return

def num_check(val, opt_name, num_type=float, num_min=None, num_max=None):
  """Check if option is valid number of given type and within specified (open) interval."""
  if val is not None:
    try:
      val = num_type(val)
    except ValueError:
      raise NPDLError('{} option ({}) has bad format.'.format(opt_name, val))

    if (num_min is not None and val <= num_min) or (num_max is not None and val >= num_max):
      raise NPDLError(('{} option ({}) falls outside of ' +
                       'required range [{}, {}].').format(opt_name, val, num_min, num_max))
  return val

def coord_check(coord, opt_name):
  """Check if option is valid coordinate (X,Y,Z triple or vertex index)."""
  if coord is not None:
    coord_split = coord.split(',')
    if len(coord_split) == 3:
      coord = np.array([num_check(val, opt_name) for val in coord_split])
      coord_type = 'coord'
    elif len(coord_split) == 1:
      coord = num_check(coord_split[0], opt_name, int, -1)
      coord_type = 'vertex'
    else:
      raise NPDLError('{} option ({}) has bad format.'.format(opt_name))
  else:
    coord_type = None
  return coord, coord_type

def dir_check(path, opt_name):
  above_dir = os.path.dirname(os.path.abspath(path))
  if not os.path.isdir(above_dir):
    raise NPDLError('Directory above output path for {} does not exist.'.format(opt_name))
  return

def top_perc_roi(perc, stat, mask):
  """Find top X percent of vertices within a mask for a statistical map."""
  n = int(round(.01 * perc * mask.sum()))
  top_mask = top_n_roi(n, stat, mask)
  return top_mask

def top_n_roi(n, stat, mask):
  """Find top N vertices within a mask for a statistical map."""
  num_verts = stat.size
  inds = np.arange(num_verts)
  stat = stat[mask==1]
  inds = inds[mask==1]
  top_inds = inds[np.argsort(-1. * stat)[:n]]
  top_mask = np.zeros(num_verts)
  top_mask[top_inds] = 1
  return top_mask

def thr_roi(thr, stat, mask):
  """Find all vertices above a threshold within a mask for a statistical map."""
  thr_mask = ((stat >= thr) * mask).astype(int)
  return thr_mask

def find_clusters(mask, surf):
  """Find all clusters in mask."""
  # Initialize clusters and pool of available vertices.
  clusters = np.zeros(mask.size)
  pool = np.arange(mask.size)[mask==1]

  cluster_idx = 0
  # Continue until pool is empty.
  while pool.size > 0:
    cluster_idx += 1
    # Start with first vertex in pool, and grow cluster until no neighbors left in mask.
    extension = np.array([pool[0]])
    while True:
      clusters[extension] = cluster_idx
      pool = np.setdiff1d(pool, extension)
      extension = surf.find_neighbors(extension)
      extension = np.intersect1d(pool, extension)
      if extension.size == 0:
        break
  return clusters, cluster_idx

def count_components(mask, surf):
  """Count connected components, i.e. clusters."""
  clusters, num_clusters = find_clusters(mask, surf)
  return num_clusters

def pick_seeds(sub, hemi, search_path, stat_path, uthr=4.26):
  """Pick seed vertices manually using tksurfer."""
  tmpdir = tf.mkdtemp(prefix='seeds-')
  label_path = '{}/search.label'.format(tmpdir)
  cor2label(search_path, label_path, sub, hemi)

  fmin, fmax = 2.33, uthr
  command = ('tksurfer {} {} inflated -label {} -label-outline -overlay {} ' +
             '-fminmax {} {}').format(sub, hemi, label_path, stat_path, fmin, fmax)
  proc = PopThread(command)
  proc.start()

  seeds = []
  i = 1
  cont = True
  while cont:
    while True:
      seed = raw_input('Seed {} verts: '.format(i))
      if len(seed.strip()) == 0:
        cont = False
        break
      try:
        seed = np.array(map(int, seed.strip().split()))
      except ValueError:
        print('ERROR: Must be space-separated list of vertex numbers.')
        continue
      seeds.append(seed)
      i += 1
      break

  proc.terminate()
  rmtree(tmpdir)
  return seeds

def cor2label(mask_path, label_path, sub, hemi):
  """Wrapper for mri_cor2label."""
  mask_path = os.path.abspath(mask_path)
  label_path = os.path.abspath(label_path)
  dev_null = open('/dev/null', 'a')
  rc = sp.call('mri_cor2label --i {} --id 1 --l {} --surf {} {}'.format(mask_path, label_path, sub, hemi),
               stdout=dev_null, stderr=dev_null, shell=True)
  if rc != 0:
    logger.warning('mri_cor2label failed')
  return

class PopThread(th.Thread):
  def __init__(self, command):
    self.p = None
    self.command = command.split()
    th.Thread.__init__(self)
    return

  def run(self):
    self.p = sp.Popen(self.command, stdout=sp.PIPE, stderr=sp.PIPE)
    return

  def terminate(self):
    if self.p is not None:
      self.p.terminate()
    return

def pick_roi(sub, hemi, rois, roi_stats, search_path, stat_path, surf_path, uthr=4.26):
  """Choose ROI from a set of options using tksurfer."""
  tmpdir = tf.mkdtemp(prefix='pick-roi-')
  label_path = '{}/search.label'.format(tmpdir)
  cor2label(search_path, label_path, sub, hemi)

  combined_rois = combine_rois(rois)
  seg_path = '{}/rois.shape.gii'.format(tmpdir)
  annot_path = '{}/rois.annot'.format(tmpdir)
  img_save(seg_path, combined_rois, surf_path)
  seg2annot(seg_path, annot_path, sub, hemi)

  fmin, fmax = 1.65, uthr
  command = ('tksurfer {} {} inflated -label {} -label-outline -overlay {} ' +
             '-fminmax {} {} -annotation {}').format(sub, hemi, label_path,
                                                     stat_path, fmin, fmax,
                                                     annot_path)
  proc = PopThread(command)
  proc.start()

  header = ['Num', 'Size', 'Min.stat', 'Mean.stat', 'Peak.X', 'Peak.Y',
            'Peak.Z', 'Num.comps', 'Spread', 'Lit.dist', 'Strength']
  table_inds = range(3) + [4] + range(6, 13)
  roi_stats = roi_stats[:, table_inds]
  col_types = ['d', 'd', '.2f', '.2f', '.0f', '.0f', '.0f', 'd', '.0f', '.0f', '.0f']
  print_formatted_table(roi_stats, col_types, header)

  num_rois = roi_stats.shape[0]
  while True:
    choice = raw_input('ROI choice: ')
    if not (choice.isdigit() and int(choice) in range(1, num_rois+1)):
      print('ERROR: choice must be between 1 and {}'.format(num_rois))
    else:
      choice = int(choice) - 1
      break

  proc.terminate()
  rmtree(tmpdir)
  return choice

def seg2annot(seg_path, annot_path, sub, hemi):
  """Wrapper for mris_seg2annot."""
  seg_path = os.path.abspath(seg_path)
  annot_path = os.path.abspath(annot_path)
  lut = '{}/etc/ROIColorLUT.txt'.format(os.environ['NPDL_SCRIPT_DIR'])
  dev_null = open('/dev/null', 'a')
  rc = sp.call(('mris_seg2annot --seg {} --ctab {} --s {} --h {} ' +
                '--o {}').format(seg_path, lut, sub, hemi, annot_path),
                stdout=dev_null, stderr=dev_null, shell=True)
  if rc != 0:
    logger.warning('mris_seg2annot failed.')
  return

def combine_rois(rois):
  """Combine list of ROIs into a single map."""
  combined_rois = np.sum(rois * np.arange(1, rois.shape[0]+1).reshape((-1, 1)), axis=0)
  return combined_rois

def print_formatted_table(table, table_formats, header=None):
  """Print a table with formatted, left-aligned columns."""
  if type(table) == np.ndarray:
    table = table.tolist()
  table_formats = ['{{0:{}}}'.format(tf) for tf in table_formats]
  table = [[tf.format(val) for tf, val in zip(table_formats, row)] for row in table]
  if header is not None:
    table = [header] + table
  entry_sizes = np.array([[len(entry) for entry in row] for row in table])
  col_widths = [np.max(entry_sizes[:, i])+1 for i in range(entry_sizes.shape[1])]
  row_format = ' '.join(['{{{}:<{}s}}'.format(i, cw) for i, cw in enumerate(col_widths)])
  table_str = '\n'.join([row_format.format(*row) for row in table]) + '\n'
  print(table_str)
  return

def watershed(seeds, stat, mask, surf, fill_rate=.05, fill_stop=None):
  """Fill in regions around a set of seeds using watershed algorithm."""
  # Initialize pool of available indices and threshold
  pool = np.arange(stat.size)[mask==1]
  thresh = np.max(stat[np.hstack(seeds)])

  # Fill until pool of available vertices is empty.
  while pool.size > 0:
    thresh -= fill_rate
    # Quit early if we've already filled to minimum level.
    if fill_stop is not None and thresh <= fill_stop:
      break
    # Add to growing regions in order of region "strength".
    # I.e. ties go to the biggest.
    ranking = np.argsort([-1 * stat[seed].sum() for seed in seeds])
    for idx in ranking:
      while True:
        # New verts are the neighbors of old verts that are in the pool and
        # above the current thresh.
        # NOTE: If you try to use the extension as the source for the neighbor
        # query next iteration, the procedure can get trapped.
        extension = surf.find_neighbors(seeds[idx])
        extension = np.intersect1d(pool, extension)
        extension = extension[stat[extension] >= thresh]
        if extension.size > 0:
          # Update growing region, extension, and pool.
          seeds[idx] = np.hstack([seeds[idx], extension])
          pool = np.setdiff1d(pool, extension)
        else:
          break

  # Convert index lists to roi masks
  clusters = []
  for seed in seeds:
    cluster = np.zeros(stat.size)
    cluster[seed] = 1
    clusters.append(cluster)
  return clusters

def descriptive_stats(roi, stat, surf, lit_coord=None, circ_coord=None):
  """Compute descriptive stats for ROI."""
  roi_inds = np.arange(roi.size)[roi==1]

  # Size (in vertices), min, max, mean statistical value
  roi_size = roi_inds.size
  if not (stat == 1).all():
    roi_min, roi_max, roi_mean = [func(stat[roi_inds])
                                  for func in np.min, np.max, np.mean]
  else:
    roi_min, roi_max, roi_mean = np.nan, np.nan, np.nan

  # Peak vertex and coordinate
  if circ_coord is not None:
    peak_vert = circ_coord
  else:
    peak_vert = roi_inds[np.argmax(stat[roi_inds])]
  peak_x, peak_y, peak_z = surf.coords[peak_vert, :]

  # Number of connected components
  num_components = count_components(roi, surf)

  # ROI "spread" (average distance from peak vertex, weighted by stat)
  dists = surf.distance([peak_vert], roi_inds)
  spread = np.sum(dists * stat[roi_inds])/np.sum(stat[roi_inds])

  # Distance from literature coordinate (weighted average as above)
  if lit_coord is not None:
    dist_from_lc = surf.distance([lit_coord], roi_inds)
    dist_from_lc = np.sum(dist_from_lc * stat[roi_inds])/np.sum(stat[roi_inds])
  else:
    dist_from_lc = np.nan

  # Composite evaluation metrics
  if not (stat == 1).all():
    strength = np.sum(stat[roi_inds])
  else:
    strength = np.nan
  # Ignore divide by zero errors.
  np.seterr(divide='ignore')
  strength_over_dist = strength / dist_from_lc
  strength_over_spread = strength / spread

  stats = (roi_size, roi_min, roi_max, roi_mean, peak_vert, peak_x, peak_y,
           peak_z, num_components, spread, dist_from_lc, strength,
           strength_over_dist, strength_over_spread)
  return stats

if __name__ == '__main__':
  try:
    main()
  except NPDLError as e:
    logger.error(e)
    sys.exit(1)
  sys.exit(0)
