#!/bin/bash

read_sl () {
  # scan log=$1; key=$2
  local line=`cat $1 | grep "^#\s*$2\s*:"`
  if [[ -z $line ]]; then
    echo "ERROR: Scan log $1 does not contain field $2." >&2
    exit 1
  fi
  echo $line | sed 's@\(.*:\s*\)\([a-zA-Z0-9._-]\+\)\(.*\)@\2@'
  return
}

if [[ $# == 0 ]]; then
  echo "Usage: ${0##*/} [options] <scan-log>"
  exit
elif [[ $1 == -h || $1 == --help ]]; then
  echo "Usage: ${0##*/} [options] <scan-log>"
  echo
  echo "Fetch par and rec files from the scanner file server and convert"
  echo "to gzipped nifti. File organization on the server is assumed to"
  echo "follow the convention:"
  echo
  echo "  /\`Lab directory\`/\`Study\`/\`Subject ID\`/*_\`Run #\`_\`Acq #\`.*"
  echo
  echo "Arguments:"
  echo "  <scanlog>    Scan log text file. Describes how files should be"
  echo "               renamed. First column is run number, second column"
  echo "               is new name. You may optionally specify the Study,"
  echo "               Subject ID, and/or Scanner ID in a comment line"
  echo "               (starting with #). All other lines starting with #"
  echo "               will be ignored. See below for an example of the"
  echo "               proper format."
  echo
  echo "Options:"
  echo "  --study <study>     Name of study on server. Read from the scan log"
  echo "                      by default (needs a '# Study: XXXX' line)."
  echo "  --sub <scan-sub>    Scanner subject ID on server. Read from the scan"
  echo "                      log by default (needs a '# Scanner ID: XXXX' line)."
  echo "  --out <outdir>      Directory to put converted data. If this option"
  echo "                      is not specified, the converted data will be placed"
  echo "                      in \`Subject ID\`/raw, in the working directory,"
  echo "                      where \`Subject ID\` is read from the scan log."
  echo "  --u <user>          Name of server user [default: $USER]."
  echo "  --labdir <dir>      Lab directory on server [default: $PF_LAB_DIR]."
  echo "  --no-clean          Don't delete redundant rec files."
  echo
  echo "%---------------------------Scan log example-----------------------------"
  echo "# Study: BLAH"
  echo "# Subject ID: BLAH_S_01"
  echo "# Scanner ID: BLAH_01"
  echo "# Registration ID: 1401010700"
  echo "# Date: 1/1/14"
  echo "# Scanner: MR1"
  echo "# Scanned by: CL"
  echo 
  echo "3 mprage"
  echo "4 blah_01"
  echo "5 blah_02 # subject stopped responding after trial 23."
  echo "6 blah_03"
  echo "7 blah_04"
  echo "8 resting"
  echo "9 dti"
  echo "%------------------------------------------------------------------------"
  exit
fi
  
# misc variables
args=$@
now=`date '+%m-%d %H:%H:%S'`
name=`basename $0`
study=
scansub=
sub=
outdir=
user=$USER
labdir=$PF_LAB_DIR
port=$PF_PORT
nocleanup=
convert_settings=$NPDL_SCRIPT_DIR/etc/dcm2nii.ini

while [[ $1 == -* ]]; do
  case $1 in
    --study)
      study=$2
      shift
      shift
      ;;
    --sub)
      scansub=$2
      shift
      shift
      ;;
    --out)
      outdir=$2
      shift
      shift
      ;;
    --u)
      user=$2
      shift
      shift
      ;;
    --labdir)
      labdir=$2
      shift
      shift
      ;;
    --no-clean)
      nocleanup=TRUE
      shift
      ;;
    *)
      echo "ERROR: Unknown flag $1." >&2
      exit 1
      ;;
  esac
done

if [[ $# != 1 ]]; then
  echo "ERROR: Incorrect number of arguments." >&2
  exit 1
fi

scanlog=$1
if [[ ! -f $scanlog ]]; then
  echo "ERROR: Scan log $scanlog doesn't exist." >&2
  exit 1
fi

# Read scan log run #, run name pairs
runs=( `awk 'BEGIN {RS="[\r\n]+"} /^[^#].*$/ {print $1}' $scanlog` )
names=( `awk 'BEGIN {RS="[\r\n]+"} /^[^#].*$/ {print $2}' $scanlog` )
if (( ${#runs[@]} != ${#names[@]} )); then
  echo "ERROR: Scan log has bad format. Unequal first and second columns." >&2
  exit 1
fi
re='^[1-9][0-9]?$'
for run in ${runs[@]}; do
  if [[ ! $run =~ $re ]]; then
    echo "ERROR: Scan log has bad format. First column should be run nums < 100." >&2
    exit 1
  fi
done

# read study, subject id, scanner subject id from scan log if necessary
if [[ -z $study ]]; then
  study=`read_sl $scanlog "Study"`
fi
if [[ -z $scansub ]]; then
  scansub=`read_sl $scanlog "Scanner ID"`
fi
if [[ -z $outdir ]]; then
  sub=`read_sl $scanlog "Subject ID"`
  outdir=$sub/raw
fi

if [[ -e $outdir ]]; then
  echo "WARNING: Output directory $outdir already exists." >&2
  while [[ -e $outdir ]]; do
    outdir=$outdir+
  done
  echo "WARNING: New output directory is $outdir." >&2
fi

if [[ $labdir != /* ]]; then
  echo "ERROR: Lab directory $labdir is not a full path." >&2
  exit 1
fi

mkdir -p $outdir 2>/dev/null

log=$outdir/parfetch.log
pardir=$outdir/par
printf '%s\n%s\n' "parfetch job starting at $now." "command line: $name $args" | tee -a $log
cp $scanlog $outdir/sl.txt

echo "Copying over par rec..." | tee -a $log
scp -P $port -r ${user}@$PF_SERVER_ADDR:$labdir/$study/$scansub \
  $pardir 2>&1 | tee -a $log
if [[ ${PIPESTATUS[0]} != 0 ]]; then
  echo "ERROR: Failed to copy $labdir/$study/$scansub from server." | tee -a $log >&2
  exit 1
fi

echo "Converting to nifti and renaming..." | tee -a $log
for i in `seq 0 $((${#runs[@]}-1))`; do
  run=${runs[i]}
  newname=${names[i]}
  runf=`echo $pardir/*_${run}_1.par`
  if [[ -f $runf ]]; then
    runnii=${runf##*/}
    runnii=${runnii%.par}.nii.gz
    echo "${runf##*/} --> $runnii" | tee -a $log
    dcm2nii -b $convert_settings \
      -o $outdir $runf 2>&1 >> $log 2>&1
    if [[ $? != 0 ]]; then
      echo "WARNING: Failed to convert run ${runf##*/}." | tee -a $log >&2
      continue
    fi
    echo "$runnii --> $newname.nii.gz" | tee -a $log
    mv $outdir/$runnii $outdir/$newname.nii.gz
  else
    echo "WARNING: No par file matching run $run was found." | tee -a $log >&2
  fi
done

# checking if there were any pars left behind
expand_runs=${runs[@]}
for run in $pardir/*_1.par; do
  run_num=`echo $run | sed 's@\(.*_\)\([1-9][0-9]\?\)\(_1\.par\)@\2@'`
  TEST=`python -c "print \"$run_num\" in \"$expand_runs\".split()"`
  if [[ $TEST == False ]]; then
    echo "WARNING: No line matching $run_num was found in scan log." | tee -a $log >&2
  fi
done

if [[ -z $nocleanup ]]; then
  for f in $pardir/*; do
    if [[ ! ( $f == */*.par || $f == */MR ) ]]; then
      rm -r $f
    fi
  done
fi

# fix permissions
find $pardir -type f -exec chmod 660 {} \;
find $pardir -type d -exec chmod 770 {} \;

exit
