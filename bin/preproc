#!/bin/bash

err () {
  # general function to pass all errors to
  if [[ -n $startlogging ]]; then
    echo "ERROR: (id=$id) $1" | tee -a $log >&2
  else
    echo "ERROR: $1" >&2
  fi
  cleanup 1
}

warn () {
  # general function to pass warnings to
  echo "WARNING: (id=$id) $1" | tee -a $log >&2
}

num_check () {
  # checks if input is a number. neg or pos; int or float
  local num=$1
  local sign=$2
  local name=$3
  local re='^-?([0-9]+)?[.]?[0-9]+$'
  if ! [[ $num =~ $re ]] ; then
   err "$name is not a number"
  fi
  if [[ $(echo "$num < 0" | bc -l) == 1 && $sign == "pos" ]]; then
    err "$name is negative"
  elif [[ $(echo "$num > 0" | bc -l) == 1 && $sign == "neg" ]]; then
    err "$name is positive"
  fi
}

int_check () {
  # checks if input is an int
  local re='^-?[1-9][0-9]*$'
  if ! [[ $1 =~ $re ]] ; then
   err "$1 is not an integer."
  fi
}

command_check () {
  # checks if last command failed. args are $? and command name
  # PIPESTATUS is used in case last command is piped to tee
  if [[ ${PIPESTATUS[0]} != 0 ]]; then
    err "$1 failed"
  fi
}

calcmax () {
  # Usage: calcmax <num-1>...
  # Calculates max of list of numbers.
  # E.g.: calcmax 1 2 3 4 5
  local vector=$@
  python -c "print max(map(float, \"$vector\".split()))"
}

normalize () {
  # Usage: normalize <in-txt> <out-txt>
  # Normalizes a numeric vector in a text file, outputs a text file.
  # E.g.: normalize vector.txt vector_norm.txt
  local input=$1
  local output=$2
  python - <<END
import numpy as np

numbers = np.genfromtxt("$input")
norm_numbers = (numbers - np.mean(numbers))/np.std(numbers)
np.savetxt("$output", norm_numbers.reshape(-1, 1))
END
}

make_lin_trend () {
  # Usage: make_lin_trend <num-TRs> <out-txt>
  # Generates a mean-centered linear trend covariate.
  # E.g.: make_lin_trend 294 lin_trend.txt
  local num_trs=$1
  local output=$2
  python - <<END
import numpy as np

lin_trend = np.linspace(-1.0, 1.0, $num_trs)
np.savetxt("$output", lin_trend.reshape(-1, 1))
END
}

make_spike_reg () {
  # Usage: make_spike_reg <num-TRs> <idx> <out-txt>
  # Generates a spike regressor at <idx> (0-based)
  # E.g.: make_spike_reg 294 5 spike.txt
  local num_trs=$1
  local spike_idx=$2
  local output=$3
  python - <<END
import numpy as np

spike = np.zeros(($num_trs, 1))
spike[$idx] = 1.0
np.savetxt("$output", spike)
END
}

cleanup () {
  if [[ -d $tmpdir ]]; then
    rm -r $tmpdir
  fi
  if [[ -z $startlogging ]]; then
    echo "Done at `date +%H:%M:%S`."
  else
    echo "(id=$id) Done at `date +%H:%M:%S`." | tee -a $log
  fi
  exit $1
}

if [[ $# == 0 ]]; then
  echo "Usage:"
  echo "  preproc [options] <subject> <input-run> <outdir>"
  echo "  preproc [options] --restart <stage> <preprocdir>"
  exit
elif [[ $1 == -h || $1 == --help ]]; then
  echo "Usage:"
  echo "  preproc [options] <subject> <input-run> <outdir>"
  echo "  preproc [options] --restart <stage> <preprocdir>"
  echo
  echo "This script preprocesses a single functional run using FSL, Freesurfer, and the"
  echo "Connectome Workbench."
  echo
  echo "Options:"
  echo "  --slice <order>     Perform slice timing correction. Order can be: u (up), d"
  echo "                      (down), or i (interleaved) (e.g. --slice u)."
  echo "  --aroma <mode>      Run ICA-AROMA denoising. Specify which steps to perform"
  echo "                      with required <mode> argument. Steps include: c (artifact"
  echo "                      classification), and r (artifact removal). Concatenate to"
  echo "                      perform both (E.g. --aroma cr)."
  echo "  --fix <mode>        Run FIX denoising. Specify which steps to perform with"
  echo "                      required <mode> argument. Steps include: i (ica), c"
  echo "                      (classification), and r (removal). Concatenate to perform"
  echo "                      a sequence (E.g. --fix icr)."
  echo "  --fixW <weights>    Specify the FIX training weights file to use for FIX."
  echo "                      (Only relevant if running FIX classification.) "
  echo "                      [default: $FIX_RDATA]"
  echo "  --fixT <thr>        Specify the FIX classification threshold. Higher values"
  echo "                      mean more components classified as noise. Sensible values"
  echo "                      are 5-20. (Only relevant if running FIX.) [default: 10]"
  echo "  --bptf <hp> <lp>    Band-pass temporal filter settings in seconds. <hp>"
  echo "                      (<lp>) is the longest (shortest) temporal period that"
  echo "                      will remain in the data. Set either to -1 to turn off."
  echo "                      [default: 128 -1]"
  echo "  --nuis-reg <mode>   Regress out nuisance covariates: white matter signal, CSF"
  echo "                      signal, or linear trend. Mode should be a comma-"
  echo "                      separated list of: wm, csf, or lin (E.g. --mode wm,lin)."
  echo "                      (Note: You can always include these in your GLM, rather"
  echo "                      regress out here, which will be less aggressive.)"
  echo "  --fdrms <thr>       Detect motion outliers using FDRMS metric. (See FMRIB"
  echo "                      Technical Report TR99MJ1.) Set your own threshold in mm."
  echo "                      [default: 1.5]"
  echo "  --dvars <thr>       Detect motion outliers using DVARS metric (see Power et"
  echo "                      al 2012). Set you own threshold in PSC * 10. "
  echo "                      [default: 75% + 1.5*IQR]"
  echo "  --dil <mm>          Dilate the surface mapped data. (To fill in small holes"
  echo "                      with nearby values.)"
  echo "  --fwhm <mm>         Smoothing kernel in mm. [default: 2]"
  echo "  --stop <stage>      Stop processing after a specific stage. Stages are: (1)"
  echo "                      FEAT processing, (2) anatomical registration, (3) ICA"
  echo "                      artifact classification, (4) denoising, (5) motion"
  echo "                      artifact detection, (6) surface mapping, dilating, and"
  echo "                      smoothing, (7) making QA report (E.g. --stop 4)."
  echo "  --restart <stage>   Restart processing from a specific stage (2-7)."
  echo "  --log <file>        Specify the logfile."
  echo
  exit
fi

# defaults
hpf=128
lpf=-1
slorder=
doaroma=
dofix=
fixmode=
if [[ -z $FIX_DIR ]]; then
  fixW=
else
  fixW=$FIX_RDATA
fi
fixT=10
nuis_reg=
fdrms=1.5
dvars=
dil=0
fwhm=2
stpstage=7
ststage=

subj=
input=
output=
tmpdir=

# misc variables
args=$@
# pid of current job, used for logging
# useful for when you have many jobs running in parallel
id=$$
now=`date "+%m-%d %H:%M:%S"`
script=$0
scriptname=`basename $0`

# logfile set-up
log=preproc_`date +%m-%d`.log

# don't log errors yet though
startlogging=

while [[ $1 == -* ]]; do
  case $1 in
    --slice)
      slorder=$2
      shift
      shift
      ;;
    --aroma)
      doaroma=TRUE
      aromamode=$2
      shift
      shift
      ;;
    --fix)
      dofix=TRUE
      fixmode=$2
      shift
      shift
      ;;
    --fixW)
      fixW=$2
      shift
      shift
      ;;
    --fixT)
      fixT=$2
      shift
      shift
      ;;
    --bptf)
      hpf=$2
      lpf=$3
      shift
      shift
      shift
      ;;
    --nuis-reg)
      nuis_reg=$2
      shift
      shift
      ;;
    --fdrms)
      fdrms=$2
      shift
      shift
      ;;
    --dvars)
      dvars=$2
      shift
      shift
      ;;
    --dil)
      dil=$2
      shift
      shift
      ;;
    --fwhm)
      fwhm=$2
      shift
      shift
      ;;
    --stop)
      stpstage=$2
      shift
      shift
      ;;
    --restart)
      ststage=$2
      shift
      shift
      ;;
    --log)
      log=$2
      if [[ ! -d `dirname $log` ]]; then
        err "Directory above log file $log does not exist."
      fi
      shift
      shift
      ;;
    *)
      err "Unrecognized flag $1."
      ;;
  esac
done

printf '%s\n%s\n' "Starting preproc job at $now (id=$id)." \
  "command line: $scriptname $args" | tee -a $log

startlogging=TRUE

trap "cleanup 1" SIGHUP SIGINT SIGTERM

# process positional arguments
# if 1 positional, assume restarting preproc
if [[ $# == 3 ]]; then
  subj=$1
  input=$(readlink -m $2)
  output=$(readlink -m $3)
  # in case someone adds .feat
  output=${output%.feat}
  featdir=${output}.feat
  func=$featdir/filtered_func_data.nii.gz
  cleanfunc=$featdir/filtered_func_data_clean.nii.gz
  ststage=1
elif [[ $# == 1 ]]; then
  if [[ -z $ststage ]]; then
    err "Incorrect arguments."
  fi
  intre='^-?[1-9][0-9]*$'
  if [[ ! $ststage =~ $intre ]] || (( $ststage < 2 || $ststage > 7 )); then
    err "Restart stage should be between 2-7."
  fi
  featdir=${1%/}
  func=$featdir/filtered_func_data.nii.gz
  if [[ ! -f $func ]]; then
    err "Volume data $func doesn't exist. Can't restart."
  fi
  nvols=`fslnvols $func`
  tr=`fslinfo $func | grep "^pixdim4" | sed 's@pixdim4\s*@@'`
  cleanfunc=$featdir/filtered_func_data_clean.nii.gz
  if (( $ststage > 4 )) && [[ ! -f $cleanfunc ]]; then
    err "Clean volume data $cleanfunc doesn't exist. Must run denoising (stage 4)."
  fi
  oldcommand=$featdir/command.txt
  if [[ ! -f $oldcommand ]]; then
    err "Command file $featdir/command.txt doesn't exist. Can't restart."
  fi
  # subject is first positional arg of three, input is second
  oldcommand=( `head -n 1 $oldcommand` )
  subj=${oldcommand[*]: -3:1}
  input=${oldcommand[*]: -2:1}
else
  err "Incorrect number of arguments $#."
fi

# checking options
# superficially checking that surface stuff exists
subjdir=$SUBJECTS_DIR/$subj
if [[ ! -d $subjdir ]]; then
  err "$subjdir does not exist."
fi
if [[ ! -f $subjdir/surf/lh.midthickness.surf.gii ]]; then
  err "No midthickness surface for $subj. Run postrecon."
fi
downsampdir=$SUBJECTS_DIR/32k_fs_LR
if [[ ! -d $downsampdir ]]; then
  err "Can't find 32k_fs_LR files. $downsampdir does not exist."
fi

# check numerical options
num_check $fdrms pos FDRMS
if [[ -n $dvars ]]; then
  num_check $dvars pos DVARS
fi
num_check $fwhm pos FWHM
num_check $dil pos Dil

# check slice timing option
if [[ -n $slorder ]]; then
  case $slorder in
    u)
      slorder=1
      ;;
    d)
      slorder=2
      ;;
    i)
      slorder=5
      ;;
    *)
      err "Bad slice order argument $slorder. Only u, d, or i."
      ;;
  esac
else
  slorder=0
fi

# check Aroma arguments
if [[ -n $doaroma ]]; then
  if [[ ! -d $AROMA_DIR ]]; then
    err "ICA-AROMA not installed or AROMA_DIR not set."
  fi
  # check Aroma mode by comparing with template
  testmode=cr
  if [[ ${testmode/$aromamode} == $testmode ]]; then
    err "Bad Aroma mode: $aromamode. Must be substring of 'cr'."
  fi
  # decide which stages of Aroma should be run
  [[ $aromamode == *c* ]] && doaromac=TRUE || doaromac=
  [[ $aromamode == *r* ]] && doaromar=TRUE || doaromar=
  classfile=$featdir/ica_aroma/classified_motion_ICs.txt
  if [[ -z $doaromac && ! -f $classfile ]]; then
    err "Must run Aroma classification before removal."
  fi
else
  doaromac=
  doaromar=
fi

# check FIX arguments
if [[ -n $dofix ]]; then
  if [[ -z $FIX_DIR ]]; then
    err "FIX is not installed or FIX_DIR is not set."
  fi
  # check if FIX mode is a substring of icr by trying to replace it
  testmode=icr
  if [[ ${testmode/$fixmode} == $testmode ]]; then
    err "Bad FIX mode $fixmode. Must be substring of 'icr'."
  fi
  # decide which stages of FIX should be run
  [[ $fixmode == *i* ]] && dofixi=TRUE || dofixi=
  [[ $fixmode == *c* ]] && dofixc=TRUE || dofixc=
  [[ $fixmode == *r* ]] && dofixr=TRUE || dofixr=
  if [[ -n $dofixc ]]; then
    if [[ ! -f $fixW ]]; then
      err "FIX weights file $fixW doesn't exist."
    fi
    int_check $fixT
    if (( $fixT < 0 || $fixT > 100 )); then
      err "FIX thresh must be between 0 and 100 (5-20 recommended)."
    fi
  fi
  icadir=$featdir/filtered_func_data.ica
  fixWname=`basename ${fixW%.RData}`
  classfile=$featdir/fix4melview_${fixWname}_thr${fixT}.txt
  if [[ -z $dofixi && ! -d $icadir ]]; then
    err "Can't run FIX without doing ICA. Add 'i' to FIX mode (e.g. --fix icr)."
  fi
  if [[ -z $dofixc && ! -f $classfile ]]; then
    err "Can't run FIX without classifying features. Add 'c' to FIX mode (e.g. --fix icr)."
  fi
else
  dofixi=
  dofixc=
  dofixr=
fi

# Check band-pass filtering options
int_check $hpf
int_check $lpf
if (( $hpf == 0 )); then
  err "high-pass filter cutoff can't be 0. Set to -1 to disable."
fi
if (( $lpf == 0 )); then
  err "low-pass filter cutoff can't be 0. Set to -1 to disable."
fi
if (( $hpf <= $lpf )) && (( $hpf > 0 )); then
  err "high-pass cutoff period can't be smaller than low-pass cutoff."
fi

# Check nuisance regression option.
if [[ -n $nuis_reg ]]; then
  nuis_reg=`echo $nuis_reg | tr , " "`
  testmode="wm csf lin"
  for cov in $nuis_reg; do
    if [[ ${testmode/$cov} == $testmode ]]; then
      err "Bad nuisance covariate name $cov. Only wm, csf, or lin."
    fi
  done
fi

if [[ -n $stpstage ]]; then
  int_check $stpstage
  if (( $stpstage < 1 || $stpstage > 7 )); then
    err "Stop stage should be between 1-7."
  fi
  if (( $stpstage < $ststage )); then
    err "Stop stage should be >= restart stage."
  fi
fi

# make tmpdir
tmpdir=`mktemp -d /tmp/preproc-XXX`

## STAGE 1
## FEAT processing
if (( $ststage <= 1 )); then
  # input checking
  if [[ ! -f $input ]]; then
    err "Input $input does not exist."
  fi
  nvols=`fslnvols $input`
  if (( $nvols <= 1 )); then
    err "Input $input is not a 4d nifti file."
  fi
  if (( $nvols < 50 )); then
    warn "Input $input has less than 50 timepoints."
  fi

  # output checking
  if [[ ! -d `dirname $output` ]]; then
    err "Directory above output $output does not exist."
  fi
  while [[ -e ${output}.feat ]]; do
    output=$output+
  done

  # feat preparation
  # Note: fsf must contain absolute paths
  fsf=$tmpdir/design.fsf
  cp $PRPRC_TEMP $fsf
  sed -i 's@\(set feat_files(1)\)\(.*\)@\1 "'$input'"@' $fsf
  sed -i 's@\(set fmri(outputdir)\)\(.*\)@\1 "'$output'"@' $fsf
  tr=`fslinfo $input | grep "^pixdim4" | sed 's@pixdim4\s*@@'`
  sed -i 's@\(set fmri(tr)\)\(.*\)@\1 '$tr'@' $fsf
  sed -i 's@\(set fmri(npts)\)\(.*\)@\1 '$nvols'@' $fsf
  sed -i 's@\(set fmri(st)\)\(.*\)@\1 '$slorder'@' $fsf
  # don't do high-pass filtering in feat, so we can use ica aroma.
  sed -i 's@\(set fmri(temphp_yn)\)\(.*\)@\1 '0'@' $fsf

  # running feat
  echo "(id=$id) Running feat..." | tee -a $log
  # send only the stderr to tee
  feat $fsf 2>&1 1>/dev/null | tee -a $log
  command_check "feat"

  # feat dir clean up
  mv $featdir/design.fsf $featdir/+design.fsf
  rm $featdir/design*
  mv $featdir/+design.fsf $featdir/design.fsf
  rm -r $featdir/logs

  echo "$scriptname $args" >> $featdir/command.txt

  # correcting global signal and making a figure
  ## Why do we have to do this again? If scaling also happens in feat?
  echo "(id=$id) Grand mean intensity scaling..." | tee -a $log
  globmean=`fslstats $func -k $featdir/mask.nii.gz -M`
  fslmaths $func -div $globmean -mul 10000 $scaler $func 2>&1 1>/dev/null | tee -a $log
  fslmeants -i $func -o $featdir/mc/globsig.txt -m $featdir/mask.nii.gz
  fsl_tsplot -i $featdir/mc/globsig.txt -o $featdir/mc/globsig.png \
    -t "Global Signal (mean=10000)" 2>&1 1>/dev/null | tee -a $log
fi
# exit if done at this stage
(( $stpstage == 1 )) && cleanup

## STAGE 2
## Anatomical registration
if (( $ststage <= 2 )); then
  echo "(id=$id) Registering functional data to MPRAGE..." | tee -a $log
  mkdir $featdir/surfreg
  # make brain-extracted example_func
  fslmaths $featdir/example_func.nii.gz -mas $featdir/mask.nii.gz \
    $featdir/example_func_brain.nii.gz 2>&1 1>/dev/null | tee -a $log
  command_check "example_func brain mask"
  # run fslregister manually with larger maxangle (default=90 or 70)
  fslregister --s $subj --mov $featdir/example_func_brain.nii.gz \
    --reg $featdir/surfreg/flirt_init.dat --niters 1 --dof 6 \
    --bins 256 --cost corratio --maxangle 120 --nobetmov \
    --fsvol brainmask.mgz >/dev/null 2>&1
  command_check "surface reg flirt init"
  bbregister --s $subj --mov $featdir/example_func_brain.nii.gz \
    --reg $featdir/surfreg/register.dat --init-reg $featdir/surfreg/flirt_init.dat \
    --t2  2>&1 1>/dev/null | tee -a $log
  command_check "surface registration"
  tkregister2 --s $subj --mov $featdir/example_func_brain.nii.gz --fstarg \
    --reg $featdir/surfreg/register.dat \
    --fslregout $featdir/surfreg/register.mat \
    --noedit 2>&1 1>/dev/null | tee -a $log
  command_check "registration conversion to FSL format."
  # Overlay surface on transformed functional for evaluating registration
  for hemi in lh rh; do
    mri_surf2vol --mkmask --hemi $hemi --projfrac 0.5 \
      --identity $subj \
      --template $subjdir/mri/orig.mgz \
      --o $tmpdir/surf_outline.$hemi.nii.gz 2>&1 1>/dev/null | tee -a $log
    command_check "make surface outline mask ($hemi)"
  done
  fslmaths $tmpdir/surf_outline.lh.nii.gz -max $tmpdir/surf_outline.rh.nii.gz \
    $tmpdir/surf_outline.nii.gz
  mri_vol2vol --mov $featdir/example_func.nii.gz \
    --targ $subjdir/mri/orig.mgz --reg $featdir/surfreg/register.dat \
    --o $tmpdir/anat_example_func.nii.gz 2>&1 1>/dev/null | tee -a $log
  # Save images of overlaid surface outline
  overlay 1 1 $tmpdir/anat_example_func.nii.gz -a \
    $tmpdir/surf_outline.nii.gz 0.99 1.01 \
    $tmpdir/surf_outline_overlay.nii.gz 2>&1 1>/dev/null | tee -a $log
  # Freesurfer files are oriented weird for slicer.
  fslreorient2std $tmpdir/surf_outline_overlay.nii.gz \
    $tmpdir/surf_outline_overlay.nii.gz 2>&1 1>/dev/null | tee -a $log
  slicer $tmpdir/surf_outline_overlay.nii.gz -a $featdir/surfreg/surf_outline.png
  command_check "saving surface outline image"
fi
(( $stpstage == 2 )) && cleanup

## STAGE 3
## ICA artifact classification
if (( $ststage <= 3 )); then
  if [[ -n $doaromac ]]; then
    echo "(id=$id) ICA AROMA..." | tee -a $log
    warp=$SUBJECTS_DIR/$subj/mri/T1.anat/T1_to_MNI_nonlin_coeff.nii.gz
    affmat=$featdir/surfreg/register.mat
    bash $NPDL_SCRIPT_DIR/lib/ica-aroma -i $input -o $featdir/ica_aroma \
      -a $affmat -w $warp -log $featdir/ica_aroma.log
    command_check "ica-aroma"
  fi

  if [[ -n $dofixi ]]; then
    echo "(id=$id) FIX MELODIC ICA..." | tee -a $log
    melodic -i $func -o $featdir/filtered_func_data.ica \
      --report 2>&1 1>/dev/null | tee -a $log
    command_check "MELODIC ICA"
  fi

  # Feature extraction and classification
  if [[ -n $dofixc ]]; then
    echo "(id=$id) FIX feature extraction..." | tee -a $log
    # Prepping anatomical files
    mkdir $featdir/reg 2>/dev/null
    mri_convert $subjdir/mri/brainmask.mgz \
      $featdir/reg/highres.nii.gz 2>&1 1>/dev/null | tee -a $log
    command_check "high res anatomical conversion"
    mri_matrix_multiply -iim $featdir/surfreg/register.dat \
      -om $featdir/reg/highres2example_func.dat 2>&1 1>/dev/null | tee -a $log
    command_check "anatomical registration inversion"
    tkregister2 --mov $featdir/reg/highres.nii.gz \
      --targ $featdir/example_func.nii.gz \
      --reg $featdir/reg/highres2example_func.dat \
      --fslregout $featdir/reg/highres2example_func.mat \
      --noedit 2>&1 1>/dev/null | tee -a $log
    command_check "anatomical registration conversion to FSL format"
    cp $featdir/example_func.nii.gz $featdir/reg/example_func.nii.gz
    # FIX feature extraction
    sh ${FIX_DIR}/fix -f $featdir 2>&1 1>/dev/null | tee -a $log
    command_check "FIX feature extraction"
    
    echo "(id=$id) FIX classification..." | tee -a $log
    sh ${FIX_DIR}/fix -c $featdir $fixW $fixT 2>&1 1>/dev/null | tee -a $log
    command_check "FIX classification"
  fi
fi
(( $stpstage == 3 )) && cleanup

## STAGE 4 
## Denoising
if (( $ststage <= 4 )); then
  # First make a copy of the pre-filtered data.
  cp $func $cleanfunc
  
  # FIX ICA denoising
  # Running FIX denoising first since it has to run on filtered_func_data.nii.gz
  # This way Aroma denoising can build on FIX denoising, if you were crazy
  # enough to want that.
  if [[ -n $dofixr ]]; then 
    echo "(id=$id) FIX artifact removal..." | tee -a $log
    fixWname=`basename ${fixW%.RData}`
    sh ${FIX_DIR}/fix -a $featdir/fix4melview_${fixWname}_thr${fixT}.txt 2>&1 1>/dev/null | tee -a $log
    command_check "FIX noise removal"
  fi
  
  # AROMA ICA denoising
  if [[ -n $doaromar ]]; then
    echo "(id=$id) Aroma artifact removal..." | tee -a $log
    # Filter out components.
    components=$(cat $featdir/ica_aroma/classified_motion_ICs.txt)
    fsl_regfilt -i $cleanfunc -d $featdir/ica_aroma/melodic.ica/melodic_mix \
      -f $components -o $cleanfunc -m $featdir/mask.nii.gz 2>&1 1>/dev/null | tee -a $log
    command_check "ica-aroma filtering"
  fi
  
  # Band-pass filtering
  dobptf=
  # Convert seconds to sigmas if > 0
  if (( $hpf >= 0 )); then
    hpf=$(echo "$hpf/(2.0 * $tr)" | bc -l)
    dobptf=TRUE
  fi
  if (( $lpf >= 0 )); then
    lpf=$(echo "$lpf/(2.0 * $tr)" | bc -l)
    dobptf=TRUE
  fi
  if [[ -n $dobptf ]]; then
    echo "(id=$id) Band-pass filtering..." | tee -a $log
    round_hpf=$(printf '%.2f' $hpf)
    round_lpf=$(printf '%.2f' $lpf)
    echo "(id=$id) HPF sigma: $round_hpf; LPF sigma: $round_lpf." | tee -a $log
    # Temporal filtering removes mean. This is what feat does to get it back
    fslmaths $cleanfunc -Tmean $tmpdir/tempmean.nii.gz
    fslmaths $cleanfunc -bptf $hpf $lpf -add $tmpdir/tempmean.nii.gz \
      $cleanfunc 2>&1 1>/dev/null | tee -a $log
    command_check "band-pass filtering"
  fi

  echo "(id=$id) Computing average gm, wm & csf signal..." | tee -a $log
  mkdir $featdir/art 2>/dev/null
  # resampling aseg to functional space. using nearest interpolation so as not to mix up labels
  mri_vol2vol --mov $featdir/example_func.nii.gz \
    --targ $subjdir/mri/aseg.mgz --reg $featdir/surfreg/register.dat \
    --inv --interp nearest --o $tmpdir/aseg.nii.gz 2>&1 1>/dev/null | tee -a $log
  command_check "aseg resampling"

  # extract regions from aseg volume: left and right ventricls, white matter
  thrs=( 4 43 2 41 3 42 )
  masknames=( csf.lh csf.rh wm.lh wm.rh gm.lh gm.rh )
  for i in {0..5}; do
    fslmaths $tmpdir/aseg.nii.gz -thr ${thrs[i]} -uthr ${thrs[i]} -bin \
      $tmpdir/${masknames[i]}.nii.gz 2>&1 1>/dev/null | tee -a $log
  done

  for region in csf wm gm; do
    # combine left and right masks, no erosion
    fslmaths $tmpdir/$region.lh.nii.gz -max $tmpdir/$region.rh.nii.gz \
      $featdir/art/$region.nii.gz 2>&1 1>/dev/null | tee -a $log
    # extract mean time series
    fslmeants -i $cleanfunc -m $featdir/art/$region.nii.gz \
      -o $featdir/art/$region.values.txt
    # Make confound regressor by normalizing region signal.
    normalize $featdir/art/$region.values.txt $featdir/art/$region.confound.txt
  done

  # plot average time series for three regions.
  fsl_tsplot -i $featdir/art/gm.confound.txt,$featdir/art/wm.confound.txt,$featdir/art/csf.confound.txt \
    --labels=grey.m,white.m,csf -o $featdir/art/gm-wm-csf.confound.png \
    -t "Normalized average time-series across tissue types"

  # Generate linear trend nuisance covariate.
  make_lin_trend $nvols $featdir/art/lin.confound.txt
  # Regress out nuisance covariates if asked for.
  if [[ -n $nuis_reg ]]; then
    echo "(id=$id) Regressing nuisance covarariates $nuis_reg..." | tee -a $log

    nuis_dm=$featdir/art/nuisance.dm.txt
    conf_list=
    for cov in $nuis_reg; do
      conf_list="$conf_list $featdir/art/$cov.confound.txt"
    done
    paste $conf_list > $nuis_dm
    fsl_regfilt -i $cleanfunc -d $nuis_dm \
      -o $cleanfunc -m $featdir/mask.nii.gz 2>&1 1>/dev/null | tee -a $log
    command_check "Nuisance regression"
  fi
fi
(( $stpstage == 4 )) && cleanup

## STAGE 5 
## Artifact detection
if (( $ststage <= 5 )); then
  mkdir $featdir/art 2>/dev/null
  echo "(id=$id) Checking for motion spikes (fdrms metric)..." | tee -a $log
  # important if re-starting
  rm $featdir/art/fdrms.* 2>/dev/null
  cp $featdir/mc/prefiltered_func_data_mcf_rel.rms $featdir/art/fdrms.values.txt

  idx=0
  fdrms_vals=`cat $featdir/art/fdrms.values.txt`
  for val in $fdrms_vals; do
    compar=`echo "$val >= $fdrms" | bc -l`
    if [[ $compar == 1 ]]; then
      printf '%d\t%.3f\n' $(($idx + 1)) $val >> $featdir/art/fdrms.drops.txt
      zpadidx=`printf '%03d' $idx`
      make_spike_reg $nvols $idx $tmpdir/fdrms-$zpadidx.txt
    fi
    idx=$(($idx + 1))
  done
  TEST=`ls $tmpdir | grep 'fdrms-[0-9]\{3\}\.txt'`
  if [[ -n $TEST ]]; then
    paste $tmpdir/fdrms-*txt >> $featdir/art/fdrms.confound.txt
  fi

  # make fdrms plot
  for i in `seq 0 $(($nvols - 1))`; do
    echo $fdrms >> $tmpdir/fdrmsthr_ts.txt
  done
  fdrms_ymin=0
  fdrms_ymax1=`calcmax $fdrms_vals`
  fdrms_ymax2=`echo "$fdrms * 1.5" | bc -l`
  fdrms_ymax=`calcmax $fdrms_ymax1 $fdrms_ymax2`
  fsl_tsplot -i $featdir/art/fdrms.values.txt,$tmpdir/fdrmsthr_ts.txt \
    -o $featdir/art/fdrms.png \
    -t "FDRMS values (thresh=$fdrms)" \
    --ymin=$fdrms_ymin --ymax=$fdrms_ymax 2>&1 1>/dev/null | tee -a $log

  echo "(id=$id) Checking for motion spikes (dvars metric)..." | tee -a $log
  if [[ -n $dvars ]]; then
    thresharg="--thresh=$dvars"
  else
    thresharg=
  fi
  fsl_motion_outliers -i $cleanfunc -o $featdir/art/dvars.confound.txt \
    -m $featdir/mask.nii.gz \
    -s $featdir/art/dvars.values.txt \
    --dvars \
    --nomoco -v $thresharg 2>&1 1>$tmpdir/dvarsthr.txt | tee -a $log
  command_check "dvars outlier detection"
  # find out what the dvars threshold was (if 75% + 1.5 IQR)
  if [[ -z $dvars ]]; then
    thresh_line=`cat $tmpdir/dvarsthr.txt | grep "Found [0-9]\+ outliers over"`
    dvars=`echo $thresh_line | sed 's@\(Found [0-9]\+ outliers over \)\(.*\)@\2@'`
  fi

  # record which timepoints were dropped and their values
  idx=1
  dvars_vals=`cat $featdir/art/dvars.values.txt`
  for val in $dvars_vals; do
    compar=`echo "$val >= $dvars" | bc -l`
    if [[ $compar == 1 ]]; then
      printf '%d\t%.3f\n' $idx $val >> $featdir/art/dvars.drops.txt
    fi
    idx=$(($idx + 1))
  done

  # make dvars plot
  for i in `seq 0 $(($nvols - 1))`; do
    echo $dvars >> $tmpdir/dvarsthr_ts.txt
  done
  dvars_ymin=0
  dvars_ymax1=`calcmax $dvars_vals`
  dvars_ymax2=`echo "$dvars * 1.5" | bc -l`
  dvars_ymax=`calcmax $dvars_ymax1 $dvars_ymax2`
  fsl_tsplot -i $featdir/art/dvars.values.txt,$tmpdir/dvarsthr_ts.txt \
    -o $featdir/art/dvars.png \
    -t "DVARS values (thresh=$dvars)" \
    --ymin=$dvars_ymin --ymax=$dvars_ymax 2>&1 1>/dev/null | tee -a $log

  echo "(id=$id) Generating tSNR and tSD images..." | tee -a $log
  fslmaths $func -Tstd -mas $featdir/mask.nii.gz \
    $featdir/art/filtered_func_tSD.nii.gz 2>&1 1>/dev/null | tee -a $log
  fslmaths $func -Tmean -div $featdir/art/filtered_func_tSD.nii.gz \
    -mas $featdir/mask.nii.gz \
    $featdir/art/filtered_func_tSNR.nii.gz 2>&1 1>/dev/null | tee -a $log
  # Make images.
  for imgtype in tSD tSNR; do
    slicer $featdir/art/filtered_func_$imgtype.nii.gz -S 2 720 \
      $featdir/art/filtered_func_$imgtype.png 2>&1 1>/dev/null | tee -a $log
  done

  echo "(id=$id) Saving animated data gifs..." | tee -a $log
  # Save animated gifs of preprocessed and raw func data (each takes ~1.5min)
  make_data_gif $input $featdir/raw_func_data.gif
  make_data_gif $cleanfunc $featdir/filtered_func_data_clean.gif
fi
(( $stpstage == 5 )) && cleanup

## STAGE 6 
## Surface mapping, dilating, smoothing
if (( $ststage <= 6 )); then
  echo "(id=$id) Mapping data to the surface..." | tee -a $log
  # editing vox2ras matrix so that surface mapping works
  mri_vol2vol --mov $cleanfunc --targ $subjdir/mri/orig.mgz \
    --o $tmpdir/anat_func.nii.gz --no-resample \
    --reg $featdir/surfreg/register.dat 2>&1 1>/dev/null | tee -a $log
  command_check "functional vox2ras editing."
  mri_vol2vol --mov $featdir/mask.nii.gz --targ $subjdir/mri/orig.mgz \
    --o $tmpdir/anat_mask.nii.gz --no-resample \
    --reg $featdir/surfreg/register.dat 2>&1 1>/dev/null | tee -a $log
  command_check "mask vox2ras editing"

  # mapping resampled data to the surface
  for hemi in lh rh; do
    wb_command -volume-to-surface-mapping \
      $tmpdir/anat_func.nii.gz \
      $subjdir/surf/$hemi.midthickness.surf.gii \
      $tmpdir/$hemi.surfed_data.func.gii \
      -ribbon-constrained \
      $subjdir/surf/$hemi.white.surf.gii \
      $subjdir/surf/$hemi.pial.surf.gii 2>&1 1>/dev/null | tee -a $log
    command_check "$hemi surface data mapping"
    wb_command -volume-to-surface-mapping \
      $tmpdir/anat_mask.nii.gz \
      $subjdir/surf/$hemi.midthickness.surf.gii \
      $tmpdir/$hemi.mask.shape.gii \
      -enclosing 2>&1 1>/dev/null | tee -a $log
    command_check "$hemi surface mask mapping"
  done

  # downsampling the surface data to the 32k mesh
  hemis=( lh rh )
  regspheres=( $downsampdir/surf/lh.sphere.reg.surf.gii $downsampdir/surf/rh.sphere.reg.surf.gii )
  echo "(id=$id) Downsampling the surface data to the 32k_fs_LR mesh..." | tee -a $log
  for i in 0 1; do
    hemi=${hemis[i]}
    regsphere=${regspheres[i]}
    wb_command -metric-resample \
      $tmpdir/$hemi.surfed_data.func.gii \
      $subjdir/surf/$hemi.sphere.reg.surf.gii \
      $regsphere \
      ADAP_BARY_AREA \
      $tmpdir/$hemi.32k_fs_LR.surfed_data.func.gii \
      -area-surfs $subjdir/surf/$hemi.midthickness.surf.gii \
      $subjdir/surf/$hemi.32k_fs_LR.midthickness.surf.gii 2>&1 1>/dev/null | tee -a $log
    command_check "$hemi surface data downsampling"
    wb_command -metric-resample \
      $tmpdir/$hemi.mask.shape.gii \
      $subjdir/surf/$hemi.sphere.reg.surf.gii \
      $regsphere \
      BARYCENTRIC \
      $tmpdir/$hemi.32k_fs_LR.mask.shape.gii \
      -largest 2>&1 1>/dev/null | tee -a $log
    command_check "$hemi surface mask downsampling"
    wb_command -metric-mask $tmpdir/$hemi.32k_fs_LR.surfed_data.func.gii \
      $tmpdir/$hemi.32k_fs_LR.mask.shape.gii \
      $tmpdir/$hemi.32k_fs_LR.surfed_data.func.gii 2>&1 1>/dev/null | tee -a $log
    command_check "$hemi post downsample masking"
  done

  # dilating the functional data
  TEST=`echo "$dil > 0" | bc -l`
  if [[ $TEST == 1 ]]; then
    echo "(id=$id) Dilating the functional data..." | tee -a $log
    for hemi in lh rh; do
      wb_command -metric-dilate $tmpdir/$hemi.32k_fs_LR.surfed_data.func.gii \
        $subjdir/surf/$hemi.32k_fs_LR.midthickness.surf.gii \
        $dil $tmpdir/$hemi.32k_fs_LR.surfed_data.func.gii 2>&1 1>/dev/null | tee -a $log
      command_check "$hemi functional dilation"
      cp $tmpdir/$hemi.32k_fs_LR.mask.shape.gii $tmpdir/$hemi.32k_fs_LR.pre-dil_mask.shape.gii
      wb_command -metric-dilate $tmpdir/$hemi.32k_fs_LR.mask.shape.gii \
        $subjdir/surf/$hemi.32k_fs_LR.midthickness.surf.gii \
        $dil $tmpdir/$hemi.32k_fs_LR.mask.shape.gii -nearest 2>&1 1>/dev/null | tee -a $log
      command_check "$hemi mask dilation"
    done
  fi

  # masking the functional data
  echo "(id=$id) Masking the medial wall..." | tee -a $log
  for hemi in lh rh; do
    # if performing dilation, want to mask and keep both dilated and undilated mask
    for mask in $tmpdir/$hemi.32k_fs_LR.*mask.shape.gii; do
      mask_bn=${mask##*/}
      wb_command -metric-math "(mask*(abs(mw-1)))" \
        $featdir/$mask_bn -fixnan 0 -var mask $mask \
        -var mw $downsampdir/label/masks/$hemi.Medial_wall.shape.gii >/dev/null 2>&1 # output is annoying
      command_check "$hemi mask medial wall masking"
    done
    wb_command -metric-mask $tmpdir/$hemi.32k_fs_LR.surfed_data.func.gii \
      $featdir/$hemi.32k_fs_LR.mask.shape.gii \
      $featdir/$hemi.32k_fs_LR.surfed_data.func.gii 2>&1 1>/dev/null | tee -a $log
    command_check "$hemi functional medial wall masking"
  done

  # smoothing on the surface
  TEST=`echo "$fwhm > 0" | bc -l`
  if [[ $TEST == 1 ]]; then
    echo "(id=$id) Smoothing data on the surface..." | tee -a $log
    sigma=`echo "$fwhm / 2.35482" | bc -l` # fwhm = 2 * sqrt(2*ln(2)) * sigma
    for hemi in lh rh; do
      wb_command -metric-smoothing $subjdir/surf/$hemi.32k_fs_LR.midthickness.surf.gii \
        $featdir/$hemi.32k_fs_LR.surfed_data.func.gii \
        $sigma \
        $featdir/$hemi.32k_fs_LR.surfed_data.func.gii \
        -roi $featdir/$hemi.32k_fs_LR.mask.shape.gii 2>&1 1>/dev/null | tee -a $log
      command_check "$hemi data smoothing"
    done
  fi
fi
(( $stpstage == 6 )) && cleanup

## STAGE 7
## Generating QA report
if (( $ststage <= 7 )); then
  echo "(id=$id) Generating QA report..." | tee -a $log
  python $NPDL_SCRIPT_DIR/lib/make_preproc_QA_report.py $featdir
fi

cleanup
